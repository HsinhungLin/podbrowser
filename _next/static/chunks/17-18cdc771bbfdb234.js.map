{"version":3,"file":"static/chunks/17-18cdc771bbfdb234.js","mappings":"2JA2Be,SAASA,EAAT,GAAiC,IAATC,EAAS,EAATA,MACrC,OACE,gBAAC,KAAD,CAASC,QAAQ,QAAQ,cAJY,iBAKlCD,EAAME,W,gJCIE,SAASC,IACtB,IAAQC,GAAUC,EAAAA,EAAAA,cAAVD,MACR,GACEE,EAAAA,EAAAA,KADYC,EAAd,EAAQC,KAAmCC,EAA3C,EAAoCT,MAGpC,OAAOU,EAAAA,EAAAA,IACL,CAAC,cAAeH,IADL,iBAEX,yFACOA,GAAyBE,EADhC,yCAC2D,MAD3D,WAEMA,EAFN,sBAEgCA,EAFhC,UAGQE,EAAaJ,EAAqBK,KAAK,GAH/C,sBAIyB,IAAIC,MAb/B,4CASE,cAKQC,GAAeC,EAAAA,EAAAA,IAA2BJ,GALlD,oBAOiBK,EAAAA,EAAAA,IAAgBF,EAAcV,GAP/C,gFASQa,EAAAA,EAAAA,IAAY,EAAD,GAAQC,EAAAA,GAAAA,WAT3B,2CAWaC,EAAAA,EAAAA,IAAkBL,EAAcP,EAAqBa,QAXlE,6EAgBA,CACEC,gBAAiB,M,gJChCR,SAASC,EAAYC,GAClC,IAAQnB,GAAUC,EAAAA,EAAAA,cAAVD,MACR,GAAuDD,EAAAA,EAAAA,KAAzCqB,EAAd,EAAQhB,KAA0BiB,EAAlC,EAA2BzB,MAE3B,OAAOU,EAAAA,EAAAA,IAAO,CACX,WAAYc,GADF,eACkBD,KADlB,iBAEX,iFACOC,GAAgBC,EADvB,yCACgD,MADhD,WAEMA,EAFN,sBAE8BA,EAF9B,iCAGSC,EAAAA,EAAAA,IAAcF,EAAaD,EAAOnB,IAH3C,2CAKA,CAAEiB,gBAAiB,M,iRCOVM,EAAmC,4BAGzC,SAASZ,EAA2BJ,GACzC,OAAOiB,EAAAA,EAAAA,IAASjB,EANgB,aAS3B,SAASkB,EAA8Bf,GAC5C,OAAOc,EAAAA,EAAAA,IAASd,EATQ,aAYnB,SAASgB,EAAuBN,GACrC,IACE,OAAOO,EAAAA,EAAAA,IAAMP,EAAYQ,OACzB,SACA,gBAAUH,EAA8BL,EAAYV,cAApD,UAIG,SAASmB,EAAyBT,GACvC,OACEU,EAAAA,EAAAA,IAAaV,EAAYW,UACzBN,EAA8BL,EAAYV,cAIvC,SAASK,EAAkBL,EAAcsB,GAA2B,IAApBC,EAAoB,uDAAZ,WACvDL,GAAQM,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,IAAY,CAAEC,KAAM,UACpB,SAACC,GAAD,OAAOC,EAAAA,EAAAA,IAAOD,EAAGE,EAAAA,GAAAA,MAAUC,EAAAA,EAAAA,IAAY,mBACvC,SAACH,GAAD,OAAOC,EAAAA,EAAAA,IAAOD,EAAGI,EAAAA,GAAAA,MAAWT,MAC5B,SAACK,GAAD,OAAOK,EAAAA,EAAAA,IAAkBL,EAAGM,EAAAA,GAAAA,MAAUV,MAExC,MAAO,CACLvB,aAAAA,EACAqB,SAASa,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,MAAsBjB,GACxCA,MAAAA,GAIG,SAAehB,EAAtB,oC,wCAAO,WAA+BF,EAAcV,GAA7C,oFACC8C,EAAerB,EAA8Bf,GAD9C,UAE0BqC,EAAAA,EAAAA,IAAgBD,EAAc,CAAE9C,MAAAA,IAF1D,UAECgD,EAFD,OAGCC,EAHD,UAGwBH,EAHxB,SAICI,GAAYC,EAAAA,EAAAA,IAASH,EAAkBC,GAJxC,sBAMG,IAAIxC,MAAMc,GANb,gCAQE,CACLb,aAAAA,EACAqB,QAASiB,EACTpB,MAAOsB,IAXJ,4C,8OC3CA,SAASE,EAA0B1C,EAAc2C,GACtD,OAAO7B,EAAAA,EAAAA,IAASd,EAAc2C,EAAKC,WAG9B,SAASC,EAAmBnC,EAAaiC,GAC9C,OAAOG,EAAAA,EAAAA,IAAOpC,EAAYQ,MAAOyB,EAAKI,oBAGjC,SAAeC,EAAtB,sC,wCAAO,WAA+BtC,EAAaiC,EAAMrD,GAAlD,8EACC2D,GAAWH,EAAAA,EAAAA,IAAOpC,EAAYQ,MAAOyB,EAAKI,qBAD3C,iCAGKG,EAAAA,EAAAA,GAAmBD,EAAU3D,GAHlC,+CAID6C,EAAAA,EAAAA,MAJC,cAECd,EAFD,uBAKE,CACLA,QAAAA,EACAsB,KAAAA,IAPG,6C,sBAWA,SAAeQ,EAAtB,sC,wCAAO,WAA4CzC,EAAaiC,EAAMrD,GAA/D,kFACC2D,EAAWP,EAA0BhC,EAAYV,aAAc2C,GAC/DS,GAAajC,EAAAA,EAAAA,IAAyBT,GAFvC,UAGiB2C,EAAAA,EAAAA,IACpBD,GACAlB,EAAAA,EAAAA,IACExB,EAAYW,SACZiC,EAAAA,EAAAA,GAAO5C,EAAYQ,MAAOyB,EAAKI,mBAAoBE,IAErD,CAAE3D,MAAAA,IATC,cAGC+B,EAHD,yBAWE,CACLrB,aAAcU,EAAYV,aAC1BqB,QAAAA,EACAH,OAAOuB,EAAAA,EAAAA,IAASpB,GAASJ,EAAAA,EAAAA,IAAMP,EAAYQ,MAAOkC,MAd/C,4C,+XCJMG,GAA6BzB,EAAAA,EAAAA,IAAY,cAEzC0B,EAAkB,QAClBC,EAAa,YACbC,EAAgB,CAC3Bd,UAJ+B,aAK/Be,UAAWH,EACXT,mBAAoBQ,EACpBK,eAAgBC,EAAAA,GAAAA,MAChBC,SAAU,SAACC,GAAD,OAAaC,EAAAA,EAAAA,IAAUD,EAASlC,EAAAA,GAAAA,MAAUoC,SAASJ,EAAAA,GAAAA,SAI/D,SAASK,EAAiBxC,EAAMyC,GAC9B,OAAO3C,EAAAA,EAAAA,KACLC,EAAAA,EAAAA,IAAY0C,IACZ,SAACxC,GAAD,OAAO2B,EAAAA,EAAAA,GAAO3B,EAAGE,EAAAA,GAAAA,KAAUgC,EAAAA,GAAAA,UAC3B,SAAClC,GAAD,OAAOyC,EAAAA,EAAAA,IAAkBzC,EAAG0C,EAAAA,GAAAA,KAAW3C,MAI3C,SAAS4C,EAAiBC,EAAc7D,EAAa8D,GACnD,IAAMC,GAAsBzD,EAAAA,EAAAA,IAAuBN,GAC7CgE,GACJjC,EAAAA,EAAAA,IAAS8B,EAAcE,KACvBhD,EAAAA,EAAAA,IAAY,CACVkD,IAAKF,IAET,OAAO7C,EAAAA,EAAAA,IACL8C,GACA5C,EAAAA,EAAAA,IAAY,iBACZ0C,GAKG,SAASI,EAAsBlE,GAA0B,IAAbmE,EAAa,wDAARC,EAAAA,EAAAA,KACtD,OAAOhE,EAAAA,EAAAA,IAASJ,EAAYV,aAAcwD,EAAiBqB,EAAIpB,GAO1D,SAAesB,EAAtB,sC,wCAAO,WAAyBrE,EAAagB,EAAMpC,GAA5C,wFAEC0F,EAAkBJ,EAAsBlE,GACxC8D,EAHD,UAGoBQ,EAHpB,mBAIsB3B,EAAAA,EAAAA,IACzB2B,GACAxD,EAAAA,EAAAA,KACEW,EAAAA,EAAAA,OACA,SAAC8C,GAAD,OAAO/C,EAAAA,EAAAA,IAAS+C,EAAGf,EAAiBxC,EAAM,CAAEA,KAAM,aAClD,SAACuD,GAAD,OAAO/C,EAAAA,EAAAA,IAAS+C,EAAGX,EAAiBW,EAAGvE,EAAa8D,OAEtD,CAAElF,MAAAA,IAXC,UAIC4F,EAJD,OAcDC,EAAqBzE,EACrB0E,GAAgBvC,EAAAA,EAAAA,IAAmBnC,EAAagD,GAf/C,mCAkBwBP,EAAAA,EAAAA,IACzBzC,EACAgD,EACApE,GArBC,QAkBH6F,EAlBG,OAuBHC,GAAgBvC,EAAAA,EAAAA,IAAmBsC,EAAoBzB,GAvBpD,0BAyBsB2B,EAAAA,EAAAA,GACzBD,EACA9F,GACA,SAAC2F,GAAD,OAAO/C,EAAAA,EAAAA,IAAS+C,EAAGf,EAAiBxC,EAAM,CAAEiD,IAAKH,QACjD,SAACS,GAAD,OAAO/C,EAAAA,EAAAA,IAAS+C,EAAGX,EAAiBW,EAAGvE,EAAa8D,OA7BjD,eAyBCD,EAzBD,yBA+BE,CACL7D,YAAayE,EACbG,MAAO,CACLjE,QAAS6D,EACThE,OAAOuB,EAAAA,EAAAA,IAASyC,EAAcV,IAEhCe,WAAY,CACVlE,QAASkD,EACT5B,KAAMe,KAvCL,6C,sBAmDA,SAAe8B,EAAtB,wC,wCAAO,WACL9E,EACA4E,EACA5D,EACApC,GAJK,sGAKLmG,EALK,+BAKY,GAGXC,EAAelE,EAAAA,GAAAA,WAAA,GACnB8D,EAAMpE,MACN,SAACS,GAAD,OAAOyC,EAAAA,EAAAA,IAAkBzC,EAAG0C,EAAAA,GAAAA,KAAW3C,KAFpB,OAGhB,CACD,SAACC,GAAD,OAAOgE,EAAAA,EAAAA,IAAqBhE,EAAGkC,EAAAA,GAAAA,MAAY+B,EAAAA,EAAAA,IAAoBN,KAC/D,SAAC3D,GAAD,OACE8D,EAAe5B,EAAAA,GAAAA,OACX7B,EAAAA,EAAAA,IAAkBL,EAAGkC,EAAAA,GAAAA,KAAY4B,EAAe5B,EAAAA,GAAAA,OAChDlC,MAhBL,UAoBsB0B,EAAAA,EAAAA,KACzBjC,EAAAA,EAAAA,IAAakE,EAAMjE,UACnBa,EAAAA,EAAAA,IAASoD,EAAMjE,QAASqE,GACxB,CAAEpG,MAAAA,IAvBC,cAoBCuG,EApBD,OA0BCT,GAAgBvC,EAAAA,EAAAA,IAAmBnC,EAAagD,GA1BjD,UA2B2BrB,EAAAA,EAAAA,IAAgB+C,EAAe,CAAE9F,MAAAA,IA3B5D,cA2BCwG,EA3BD,OA4BCC,GAAgBtD,EAAAA,EAAAA,IAASqD,GAAmB7E,EAAAA,EAAAA,IAAMqE,EAAMpE,QA5BzD,WA6BsBmC,EAAAA,EAAAA,IACzB+B,GACAlD,EAAAA,EAAAA,IACE4D,GACA1B,EAAAA,EAAAA,IAAkB2B,EAAe1B,EAAAA,GAAAA,KAAW3C,IAE9C,CAAEpC,MAAAA,IAnCC,eA6BCiF,EA7BD,yBAqCE,CACLe,MAAO,CACLjE,QAASwE,EACT3E,OAAOuB,EAAAA,EAAAA,IAASoD,GAAc5E,EAAAA,EAAAA,IAAMqE,EAAMpE,SAE5CqE,WAAY,CACVlE,QAASkD,EACT5B,KAAMe,KA5CL,4C,wBAiDA,SAAesC,EAAtB,sC,wCAAO,WAA2BtF,EAAa4E,EAAOhG,GAA/C,0FAEC2G,GAAWhF,EAAAA,EAAAA,IAAMqE,EAAMpE,OACvBkE,GAAgBvC,EAAAA,EAAAA,IAAmBnC,EAAagD,GAHjD,UAI2BrB,EAAAA,EAAAA,IAAgB+C,EAAe,CAAE9F,MAAAA,IAJ5D,cAICwG,EAJD,iBAKkCzC,EAAAA,EAAAA,IACrC+B,GACA5D,EAAAA,EAAAA,IACEsE,GACA,SAACb,GAAD,OAAOiB,EAAAA,EAAAA,IAAYjB,EAAGgB,MACtB,SAAChB,GAAD,OACE/C,EAAAA,EAAAA,IACE+C,GACAzD,EAAAA,EAAAA,KACEiB,EAAAA,EAAAA,IAASqD,GAAmB7E,EAAAA,EAAAA,IAAMP,EAAYQ,SAC9C,SAACS,GAAD,OAAOwE,EAAAA,EAAAA,IAAUxE,GAAGG,EAAAA,EAAAA,IAAY,iBAAkBmE,UAI1D,CAAE3G,MAAAA,IAnBC,cAKC8G,EALD,kBAsBCC,EAAAA,EAAAA,IAAWJ,EAAU,CAAE3G,MAAAA,IAtBxB,eAwBCgH,GAAoBC,EAAAA,EAAAA,IAAgBN,GAxBrC,WAyB+B5D,EAAAA,EAAAA,IAAgBiE,EAAmB,CACrEhH,MAAAA,IA1BG,WAyBCkH,EAzBD,OA4BCC,GAAsBhE,EAAAA,EAAAA,IAC1B+D,EACAF,EACA,CAAEhH,MAAAA,KAGF0E,EAAAA,EAAAA,IAAUyC,EAAqBC,EAAAA,GAAAA,UAAcC,OAAS,EAlCnD,mCAoCGC,EAAAA,EAAAA,IAAgBN,EAAmB,CAAEhH,MAAAA,IApCxC,iCAuCE,CACL+B,QAAS+E,EACTzD,KAAMe,IAzCH,6C,gKC3KA,SAASmD,EAA+BC,GAC7C,IAAQzF,EAAkByF,EAAlBzF,QAASsB,EAASmE,EAATnE,KACjB,OAAOoE,EAAAA,EAAAA,IAAY1F,GAChB2F,QAAO,SAACjD,GAAD,OAAapB,EAAKmB,SAASC,MAClCkD,KAAI,SAAC/F,GACJ,MAAO,CACLA,MAAAA,EACAG,QAAAA,MAKD,SAAS6F,EAAmCC,GACjD,OAAOA,EACJF,KAAI,SAACG,GAAD,OAAWP,EAA+BO,MAC9CC,QAAO,SAACC,EAAMC,GAAP,OAAoBD,EAAKE,OAAOD,KAAW,IAGhD,SAAe3G,EAAtB,sC,wCAAO,WAA6BF,EAAaD,EAAOnB,GAAjD,uFAC2BmI,QAAQC,IACtCjH,EAAMwG,IAAN,mCAAU,WAAOtE,GAAP,2FAAgBK,EAAAA,EAAAA,IAAgBtC,EAAaiC,EAAMrD,IAAnD,2CAAV,wDAFG,cACC6H,EADD,yBAIED,EAAmCC,IAJrC,2C,0KCZA,SAAejE,EAAtB,oC,wCAAO,WAAkCyB,EAAKrF,GAAvC,2FAEU+C,EAAAA,EAAAA,IAAgBsC,EAAK,CAAErF,MAAAA,IAFjC,6EAICa,EAAAA,EAAAA,IAAY,EAAD,GAAQC,EAAAA,GAAAA,WAJpB,2CAImD+B,EAAAA,EAAAA,OAJnD,6E,sBASA,SAAekD,EAAtB,oC,wCAAO,WAAqCV,EAAKrF,GAA1C,yGACiB4D,EAAmByB,EAAKrF,GADzC,WACC+B,EADD,kBAAoDsG,EAApD,iCAAoDA,EAApD,oCAEEtE,EAAAA,EAAAA,IAAmBsB,EAAKnD,EAAAA,GAAAA,WAAA,GAAMH,GAAN,OAAkBsG,IAAa,CAAErI,MAAAA,KAF3D,2C,iPCHA,SAAesI,EAAtB,oC,wCAAO,WAAwB3B,EAAU3G,GAAlC,wFACiB+C,EAAAA,EAAAA,KAAgBwF,EAAAA,EAAAA,IAAW5B,GAAW,CAAE3G,MAAAA,IADzD,cACC+B,EADD,yBAEE,CACLA,QAAAA,EACAH,OAAOuB,EAAAA,EAAAA,IAASpB,EAAS4E,KAJtB,4C,sBAQA,SAAS6B,EAAYxC,GAC1B,OAAOrE,EAAAA,EAAAA,IAAMqE,EAAMpE,OAGd,SAAS6G,EAAazC,GAC3B,OAAO0C,EAAAA,EAAAA,IAAkB1C,EAAMpE,MAAOmD,EAAAA,GAAAA,MAGjC,SAASuB,EAAoBN,GAClC,OAAO0C,EAAAA,EAAAA,IAAkB1C,EAAMpE,MAAO2C,EAAAA,GAAAA,OAAe","sources":["webpack://_N_E/./components/errorMessage/index.jsx","webpack://_N_E/./src/hooks/useAddressBook/index.js","webpack://_N_E/./src/hooks/useContacts/index.js","webpack://_N_E/./src/models/addressBook/index.js","webpack://_N_E/./src/models/contact/collection/index.js","webpack://_N_E/./src/models/contact/group/index.js","webpack://_N_E/./src/models/contact/index.js","webpack://_N_E/./src/models/dataset/index.js","webpack://_N_E/./src/models/group/index.js"],"sourcesContent":["/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { Message } from \"@inrupt/prism-react-components\";\nimport React from \"react\";\nimport T from \"prop-types\";\n\nexport const TESTCAFE_ID_ERROR_MESSAGE = \"error-message\";\n\nexport default function ErrorMessage({ error }) {\n  return (\n    <Message variant=\"error\" data-testid={TESTCAFE_ID_ERROR_MESSAGE}>\n      {error.message}\n    </Message>\n  );\n}\n\nErrorMessage.propTypes = {\n  error: T.shape({\n    message: T.string,\n  }).isRequired,\n};\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport useSWR from \"swr\";\nimport { useSession } from \"@inrupt/solid-ui-react\";\nimport useAuthenticatedProfile from \"../useAuthenticatedProfile\";\nimport {\n  createAddressBook,\n  getAddressBookContainerUrl,\n  loadAddressBook,\n} from \"../../models/addressBook\";\nimport { ERROR_CODES, isHTTPError } from \"../../error\";\n\nexport const ERROR_USE_ADDRESS_BOOK_NO_POD_ROOT =\n  \"No pod root found for authenticated user\";\n\nexport default function useAddressBook() {\n  const { fetch } = useSession();\n  const { data: authenticatedProfile, error: authenticatedError } =\n    useAuthenticatedProfile();\n\n  return useSWR(\n    [\"addressBook\", authenticatedProfile],\n    async () => {\n      if (!authenticatedProfile && !authenticatedError) return null;\n      if (authenticatedError) throw authenticatedError;\n      const podRootUrl = authenticatedProfile.pods[0];\n      if (!podRootUrl) throw new Error(ERROR_USE_ADDRESS_BOOK_NO_POD_ROOT);\n      const containerUrl = getAddressBookContainerUrl(podRootUrl);\n      try {\n        return await loadAddressBook(containerUrl, fetch);\n      } catch (error) {\n        if (isHTTPError(error, ERROR_CODES.NOT_FOUND)) {\n          // the address book is not yet created\n          return createAddressBook(containerUrl, authenticatedProfile.webId);\n        }\n        throw error;\n      }\n    },\n    {\n      errorRetryCount: 0,\n    }\n  );\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useSession } from \"@inrupt/solid-ui-react\";\nimport useSWR from \"swr\";\nimport useAddressBook from \"../useAddressBook\";\nimport { getContactAll } from \"../../models/contact\";\n\nexport default function useContacts(types) {\n  const { fetch } = useSession();\n  const { data: addressBook, error: addressBookError } = useAddressBook();\n\n  return useSWR(\n    [\"contacts\", addressBook, ...types],\n    async () => {\n      if (!addressBook && !addressBookError) return null;\n      if (addressBookError) throw addressBookError;\n      return getContactAll(addressBook, types, fetch);\n    },\n    { errorRetryCount: 0 }\n  );\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  addStringNoLocale,\n  addUrl,\n  asUrl,\n  createSolidDataset,\n  createThing,\n  getSolidDataset,\n  getSourceUrl,\n  getThing,\n  setThing,\n} from \"@inrupt/solid-client\";\nimport { acl, dc, rdf } from \"rdf-namespaces\";\nimport { joinPath } from \"../../stringHelpers\";\nimport { chain } from \"../../solidClientHelpers/utils\";\nimport { vcardExtras } from \"../../addressBook\";\n\n/*\n * AddressBook is our Pod-wide accessible source for contacts\n */\n\n/* Model constants */\nexport const CONTACTS_CONTAINER = \"contacts/\";\nexport const INDEX_FILE = \"index.ttl\";\nexport const ADDRESS_BOOK_ERROR_NO_MAIN_INDEX = \"Unable to load main index\";\n\n/* Model functions */\nexport function getAddressBookContainerUrl(podRootUrl) {\n  return joinPath(podRootUrl, CONTACTS_CONTAINER);\n}\n\nexport function getAddressBookIndexDefaultUrl(containerUrl) {\n  return joinPath(containerUrl, INDEX_FILE);\n}\n\nexport function getAddressBookThingUrl(addressBook) {\n  try {\n    return asUrl(addressBook.thing);\n  } catch {\n    return `${getAddressBookIndexDefaultUrl(addressBook.containerUrl)}#this`;\n  }\n}\n\nexport function getAddressBookDatasetUrl(addressBook) {\n  return (\n    getSourceUrl(addressBook.dataset) ||\n    getAddressBookIndexDefaultUrl(addressBook.containerUrl)\n  );\n}\n\nexport function createAddressBook(containerUrl, owner, title = \"Contacts\") {\n  const thing = chain(\n    createThing({ name: \"this\" }),\n    (t) => addUrl(t, rdf.type, vcardExtras(\"AddressBook\")),\n    (t) => addUrl(t, acl.owner, owner),\n    (t) => addStringNoLocale(t, dc.title, title)\n  );\n  return {\n    containerUrl,\n    dataset: setThing(createSolidDataset(), thing),\n    thing,\n  };\n}\n\nexport async function loadAddressBook(containerUrl, fetch) {\n  const mainIndexUrl = getAddressBookIndexDefaultUrl(containerUrl);\n  const mainIndexDataset = await getSolidDataset(mainIndexUrl, { fetch });\n  const mainIndexThingUrl = `${mainIndexUrl}#this`;\n  const mainIndex = getThing(mainIndexDataset, mainIndexThingUrl);\n  if (!mainIndex) {\n    throw new Error(ADDRESS_BOOK_ERROR_NO_MAIN_INDEX);\n  }\n  return {\n    containerUrl,\n    dataset: mainIndexDataset,\n    thing: mainIndex,\n  };\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  asUrl,\n  createSolidDataset,\n  getThing,\n  getUrl,\n  saveSolidDatasetAt,\n  setThing,\n  setUrl,\n} from \"@inrupt/solid-client\";\nimport { joinPath } from \"../../../stringHelpers\";\nimport { getAddressBookDatasetUrl } from \"../../addressBook\";\nimport { getOrCreateDataset } from \"../../dataset\";\n\n/**\n * A contact index is the collection of a given contact type with a subset of\n * their data so that we can easily list contacts and some of their info without\n * having to fetch all of the specific contact resources.\n */\n\n/* Model functions */\nexport function getContactIndexDefaultUrl(containerUrl, type) {\n  return joinPath(containerUrl, type.indexFile);\n}\n\nexport function getContactIndexUrl(addressBook, type) {\n  return getUrl(addressBook.thing, type.indexFilePredicate);\n}\n\nexport async function getContactIndex(addressBook, type, fetch) {\n  const indexUrl = getUrl(addressBook.thing, type.indexFilePredicate);\n  const dataset = indexUrl\n    ? await getOrCreateDataset(indexUrl, fetch)\n    : createSolidDataset();\n  return {\n    dataset,\n    type,\n  };\n}\n\nexport async function addContactIndexToAddressBook(addressBook, type, fetch) {\n  const indexUrl = getContactIndexDefaultUrl(addressBook.containerUrl, type);\n  const datasetUrl = getAddressBookDatasetUrl(addressBook);\n  const dataset = await saveSolidDatasetAt(\n    datasetUrl,\n    setThing(\n      addressBook.dataset,\n      setUrl(addressBook.thing, type.indexFilePredicate, indexUrl)\n    ),\n    { fetch }\n  );\n  return {\n    containerUrl: addressBook.containerUrl,\n    dataset,\n    thing: getThing(dataset, asUrl(addressBook.thing, datasetUrl)),\n  };\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  addStringNoLocale,\n  addUrl,\n  asUrl,\n  createSolidDataset,\n  createThing,\n  deleteContainer,\n  deleteFile,\n  getSolidDataset,\n  getSourceUrl,\n  getThing,\n  getUrlAll,\n  removeStringNoLocale,\n  removeThing,\n  removeUrl,\n  saveSolidDatasetAt,\n  setStringNoLocale,\n  setThing,\n  setUrl,\n} from \"@inrupt/solid-client\";\nimport { ldp, rdf, vcard, foaf } from \"rdf-namespaces\";\nimport { v4 as uuid } from \"uuid\";\nimport { chain } from \"../../../solidClientHelpers/utils\";\nimport { getContainerUrl, joinPath } from \"../../../stringHelpers\";\nimport {\n  addContactIndexToAddressBook,\n  getContactIndexUrl,\n} from \"../collection\";\nimport { vcardExtras } from \"../../../addressBook\";\nimport { updateOrCreateDataset } from \"../../dataset\";\nimport { getContactAll } from \"../index\";\nimport { getAddressBookThingUrl } from \"../../addressBook\";\nimport { getGroupDescription } from \"../../group\";\n\n/* Model constants */\nexport const NAME_GROUP_INDEX_PREDICATE = vcardExtras(\"groupIndex\");\nexport const GROUPS_INDEX_FILE = \"groups.ttl\";\nexport const GROUP_CONTAINER = \"Group\";\nexport const INDEX_FILE = \"index.ttl\";\nexport const GROUP_CONTACT = {\n  indexFile: GROUPS_INDEX_FILE,\n  container: GROUP_CONTAINER,\n  indexFilePredicate: NAME_GROUP_INDEX_PREDICATE,\n  contactTypeUrl: vcard.Group,\n  isOfType: (contact) => getUrlAll(contact, rdf.type).includes(vcard.Group),\n};\n\n/* Model internal functions */\nfunction createGroupThing(name, thingOptions) {\n  return chain(\n    createThing(thingOptions),\n    (t) => setUrl(t, rdf.type, vcard.Group),\n    (t) => setStringNoLocale(t, foaf.name, name)\n  );\n}\n\nfunction createIndexThing(indexDataset, addressBook, groupThingUrl) {\n  const addressBookThingUrl = getAddressBookThingUrl(addressBook);\n  const addressBookInDataset =\n    getThing(indexDataset, addressBookThingUrl) ||\n    createThing({\n      url: addressBookThingUrl,\n    });\n  return addUrl(\n    addressBookInDataset,\n    vcardExtras(\"includesGroup\"),\n    groupThingUrl\n  );\n}\n\n/* Model functions */\nexport function createGroupDatasetUrl(addressBook, id = uuid()) {\n  return joinPath(addressBook.containerUrl, GROUP_CONTAINER, id, INDEX_FILE);\n}\n\n/**\n * Note that you need to refresh the cache of group index after this, e.g. mutate SWR cache\n * You also need to refresh the cache of the address book\n */\nexport async function saveGroup(addressBook, name, fetch) {\n  // save the group resource itself\n  const groupDatasetUrl = createGroupDatasetUrl(addressBook);\n  const groupThingUrl = `${groupDatasetUrl}#this`;\n  const groupDataset = await saveSolidDatasetAt(\n    groupDatasetUrl,\n    chain(\n      createSolidDataset(),\n      (d) => setThing(d, createGroupThing(name, { name: \"this\" })),\n      (d) => setThing(d, createIndexThing(d, addressBook, groupThingUrl))\n    ),\n    { fetch }\n  );\n  // then link the group to the group index\n  let updatedAddressBook = addressBook;\n  let groupIndexUrl = getContactIndexUrl(addressBook, GROUP_CONTACT);\n  if (!groupIndexUrl) {\n    // add the index to the Address Book if it doesn't already exist\n    updatedAddressBook = await addContactIndexToAddressBook(\n      addressBook,\n      GROUP_CONTACT,\n      fetch\n    );\n    groupIndexUrl = getContactIndexUrl(updatedAddressBook, GROUP_CONTACT);\n  }\n  const indexDataset = await updateOrCreateDataset(\n    groupIndexUrl,\n    fetch,\n    (d) => setThing(d, createGroupThing(name, { url: groupThingUrl })),\n    (d) => setThing(d, createIndexThing(d, addressBook, groupThingUrl))\n  );\n  return {\n    addressBook: updatedAddressBook,\n    group: {\n      dataset: groupDataset,\n      thing: getThing(groupDataset, groupThingUrl),\n    },\n    groupIndex: {\n      dataset: indexDataset,\n      type: GROUP_CONTACT,\n    },\n  };\n}\n\nexport async function getGroupAll(addressBook, fetch) {\n  return getContactAll(addressBook, [GROUP_CONTACT], fetch);\n}\n\n/**\n * Note that you might need to refresh the cache of group index after this, e.g. mutate SWR cache\n */\nexport async function renameGroup(\n  addressBook,\n  group,\n  name,\n  fetch,\n  optionalFields = {}\n) {\n  // update the group itself\n  const updatedGroup = chain(\n    group.thing,\n    (t) => setStringNoLocale(t, foaf.name, name),\n    ...[\n      (t) => removeStringNoLocale(t, vcard.note, getGroupDescription(group)),\n      (t) =>\n        optionalFields[vcard.note]\n          ? addStringNoLocale(t, vcard.note, optionalFields[vcard.note])\n          : t,\n    ]\n  );\n\n  const savedDataset = await saveSolidDatasetAt(\n    getSourceUrl(group.dataset),\n    setThing(group.dataset, updatedGroup),\n    { fetch }\n  );\n  // update the group index\n  const groupIndexUrl = getContactIndexUrl(addressBook, GROUP_CONTACT);\n  const groupIndexDataset = await getSolidDataset(groupIndexUrl, { fetch });\n  const existingGroup = getThing(groupIndexDataset, asUrl(group.thing));\n  const indexDataset = await saveSolidDatasetAt(\n    groupIndexUrl,\n    setThing(\n      groupIndexDataset,\n      setStringNoLocale(existingGroup, foaf.name, name)\n    ),\n    { fetch }\n  );\n  return {\n    group: {\n      dataset: savedDataset,\n      thing: getThing(savedDataset, asUrl(group.thing)),\n    },\n    groupIndex: {\n      dataset: indexDataset,\n      type: GROUP_CONTACT,\n    },\n  };\n}\n\nexport async function deleteGroup(addressBook, group, fetch) {\n  // first remove the group from the group index\n  const groupUrl = asUrl(group.thing);\n  const groupIndexUrl = getContactIndexUrl(addressBook, GROUP_CONTACT);\n  const groupIndexDataset = await getSolidDataset(groupIndexUrl, { fetch });\n  const updatedGroupIndexDataset = await saveSolidDatasetAt(\n    groupIndexUrl,\n    chain(\n      groupIndexDataset,\n      (d) => removeThing(d, groupUrl), // remove the cached data about group\n      (d) =>\n        setThing(\n          d,\n          chain(\n            getThing(groupIndexDataset, asUrl(addressBook.thing)),\n            (t) => removeUrl(t, vcardExtras(\"includesGroup\"), groupUrl) // remove the includesGroup reference to group\n          )\n        )\n    ),\n    { fetch }\n  );\n  // then remove the group itself\n  await deleteFile(groupUrl, { fetch });\n  // remove the container, if it's empty\n  const groupContainerUrl = getContainerUrl(groupUrl);\n  const groupContainerDataset = await getSolidDataset(groupContainerUrl, {\n    fetch,\n  });\n  const groupContainerThing = getThing(\n    groupContainerDataset,\n    groupContainerUrl,\n    { fetch }\n  );\n  const groupContainerHasChildren =\n    getUrlAll(groupContainerThing, ldp.contains).length > 0;\n  if (!groupContainerHasChildren) {\n    await deleteContainer(groupContainerUrl, { fetch });\n  }\n  // then return the updated version of the group index\n  return {\n    dataset: updatedGroupIndexDataset,\n    type: GROUP_CONTACT,\n  };\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { getThingAll } from \"@inrupt/solid-client\";\nimport { getContactIndex } from \"./collection\";\n\n/*\n * Contacts represent the agents or groups in a user's AddressBook\n */\n\n/* Model functions */\nexport function getContactAllFromContactsIndex(contactIndex) {\n  const { dataset, type } = contactIndex;\n  return getThingAll(dataset)\n    .filter((contact) => type.isOfType(contact))\n    .map((thing) => {\n      return {\n        thing,\n        dataset,\n      };\n    });\n}\n\nexport function getContactAllFromContactIndexArray(contactIndexArray) {\n  return contactIndexArray\n    .map((index) => getContactAllFromContactsIndex(index))\n    .reduce((memo, contacts) => memo.concat(contacts), []);\n}\n\nexport async function getContactAll(addressBook, types, fetch) {\n  const contactIndexArray = await Promise.all(\n    types.map(async (type) => getContactIndex(addressBook, type, fetch))\n  );\n  return getContactAllFromContactIndexArray(contactIndexArray);\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  createSolidDataset,\n  getSolidDataset,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { ERROR_CODES, isHTTPError } from \"../../error\";\nimport { chain } from \"../../solidClientHelpers/utils\";\n\n/*\n * Datasets refer to SolidDataset from @inrupt/solid-client.\n * This module adds some extra custom, handy functions.\n */\n\n/* Model functions */\nexport async function getOrCreateDataset(url, fetch) {\n  try {\n    return await getSolidDataset(url, { fetch });\n  } catch (error) {\n    if (isHTTPError(error, ERROR_CODES.NOT_FOUND)) return createSolidDataset();\n    throw error;\n  }\n}\n\nexport async function updateOrCreateDataset(url, fetch, ...operations) {\n  const dataset = await getOrCreateDataset(url, fetch);\n  return saveSolidDatasetAt(url, chain(dataset, ...operations), { fetch });\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  addUrl,\n  asUrl,\n  getSolidDataset,\n  getSourceUrl,\n  getStringNoLocale,\n  getThing,\n  getUrlAll,\n  removeUrl,\n  saveSolidDatasetAt,\n  setThing,\n} from \"@inrupt/solid-client\";\nimport { foaf, vcard } from \"rdf-namespaces\";\nimport { getBaseUrl } from \"../../solidClientHelpers/resource\";\n\n/*\n * A group might refer to a group in the address book, but could also live outside of it\n */\n\n/* Model functions */\nexport async function getGroup(groupUrl, fetch) {\n  const dataset = await getSolidDataset(getBaseUrl(groupUrl), { fetch });\n  return {\n    dataset,\n    thing: getThing(dataset, groupUrl),\n  };\n}\n\nexport function getGroupUrl(group) {\n  return asUrl(group.thing);\n}\n\nexport function getGroupName(group) {\n  return getStringNoLocale(group.thing, foaf.name);\n}\n\nexport function getGroupDescription(group) {\n  return getStringNoLocale(group.thing, vcard.note) || \"\";\n}\n\n/**\n * Note that you might need to refresh the cache of the specific group after this, e.g. mutate SWR cache\n */\nexport async function addGroupMember(group, agentUrl, fetch) {\n  const savedDataset = await saveSolidDatasetAt(\n    getSourceUrl(group.dataset),\n    setThing(group.dataset, addUrl(group.thing, vcard.hasMember, agentUrl)),\n    { fetch }\n  );\n  return {\n    dataset: savedDataset,\n    thing: getThing(savedDataset, asUrl(group.thing)),\n  };\n}\n\n/**\n * Note that you might need to refresh the cache of the specific group after this, e.g. mutate SWR cache\n */\nexport async function removeGroupMember(group, agentUrl, fetch) {\n  const savedDataset = await saveSolidDatasetAt(\n    getSourceUrl(group.dataset),\n    setThing(group.dataset, removeUrl(group.thing, vcard.hasMember, agentUrl)),\n    { fetch }\n  );\n  return {\n    dataset: savedDataset,\n    thing: getThing(savedDataset, asUrl(group.thing)),\n  };\n}\n\n/**\n * Do not return the dataset of each group member, must be loaded separately\n */\nexport function getGroupMemberUrlAll(group) {\n  return getUrlAll(group.thing, vcard.hasMember);\n}\n"],"names":["ErrorMessage","error","variant","message","useAddressBook","fetch","useSession","useAuthenticatedProfile","authenticatedProfile","data","authenticatedError","useSWR","podRootUrl","pods","Error","containerUrl","getAddressBookContainerUrl","loadAddressBook","isHTTPError","ERROR_CODES","createAddressBook","webId","errorRetryCount","useContacts","types","addressBook","addressBookError","getContactAll","ADDRESS_BOOK_ERROR_NO_MAIN_INDEX","joinPath","getAddressBookIndexDefaultUrl","getAddressBookThingUrl","asUrl","thing","getAddressBookDatasetUrl","getSourceUrl","dataset","owner","title","chain","createThing","name","t","addUrl","rdf","vcardExtras","acl","addStringNoLocale","dc","setThing","createSolidDataset","mainIndexUrl","getSolidDataset","mainIndexDataset","mainIndexThingUrl","mainIndex","getThing","getContactIndexDefaultUrl","type","indexFile","getContactIndexUrl","getUrl","indexFilePredicate","getContactIndex","indexUrl","getOrCreateDataset","addContactIndexToAddressBook","datasetUrl","saveSolidDatasetAt","setUrl","NAME_GROUP_INDEX_PREDICATE","GROUP_CONTAINER","INDEX_FILE","GROUP_CONTACT","container","contactTypeUrl","vcard","isOfType","contact","getUrlAll","includes","createGroupThing","thingOptions","setStringNoLocale","foaf","createIndexThing","indexDataset","groupThingUrl","addressBookThingUrl","addressBookInDataset","url","createGroupDatasetUrl","id","uuid","saveGroup","groupDatasetUrl","d","groupDataset","updatedAddressBook","groupIndexUrl","updateOrCreateDataset","group","groupIndex","renameGroup","optionalFields","updatedGroup","removeStringNoLocale","getGroupDescription","savedDataset","groupIndexDataset","existingGroup","deleteGroup","groupUrl","removeThing","removeUrl","updatedGroupIndexDataset","deleteFile","groupContainerUrl","getContainerUrl","groupContainerDataset","groupContainerThing","ldp","length","deleteContainer","getContactAllFromContactsIndex","contactIndex","getThingAll","filter","map","getContactAllFromContactIndexArray","contactIndexArray","index","reduce","memo","contacts","concat","Promise","all","operations","getGroup","getBaseUrl","getGroupUrl","getGroupName","getStringNoLocale"],"sourceRoot":""}