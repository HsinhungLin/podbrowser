{"version":3,"file":"static/chunks/385-68603fd49812af47.js","mappings":"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","sources":["webpack://_N_E/./components/confirmationDialog/index.jsx","webpack://_N_E/./components/confirmationDialog/styles.js","webpack://_N_E/./src/accessControl/acp/index.js","webpack://_N_E/./src/effects/auth/index.js","webpack://_N_E/./src/models/contact/authenticated/index.js","webpack://_N_E/./src/models/contact/public/index.js","webpack://_N_E/./src/solidClientHelpers/permissions.js"],"sourcesContent":["/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  createStyles,\n  DialogContentText,\n} from \"@material-ui/core\";\nimport { Button } from \"@inrupt/prism-react-components\";\nimport ConfirmationDialogContext from \"../../src/contexts/confirmationDialogContext\";\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles((theme) => createStyles(styles(theme)));\n\nexport const TESTCAFE_ID_CONFIRM_BUTTON = \"confirm-button\";\nexport const TESTCAFE_ID_CONFIRMATION_CANCEL_BUTTON =\n  \"confirmation-cancel-button\";\nexport const TESTCAFE_ID_CONFIRMATION_DIALOG = \"confirmation-dialog\";\nexport const TESTCAFE_ID_CONFIRMATION_DIALOG_TITLE =\n  \"confirmation-dialog-title\";\nexport const TESTCAFE_ID_CONFIRMATION_DIALOG_CONTENT =\n  \"confirmation-dialog-content\";\n\nexport default function ConfirmationDialog() {\n  const classes = useStyles();\n\n  const {\n    open,\n    title,\n    content,\n    customContentWrapper,\n    setConfirmed,\n    cancelText,\n    confirmText,\n    omitCancelButton,\n    isDangerousAction,\n  } = useContext(ConfirmationDialogContext);\n\n  return (\n    <Dialog\n      classes={{ paperWidthFalse: classes.dialog }}\n      data-testid={TESTCAFE_ID_CONFIRMATION_DIALOG}\n      maxWidth={false}\n      aria-labelledby=\"confirmation-dialog\"\n      open={!!open}\n    >\n      {title && (\n        <DialogTitle\n          data-testid={TESTCAFE_ID_CONFIRMATION_DIALOG_TITLE}\n          disableTypography\n          classes={{ root: classes.dialogTitle }}\n        >\n          {title}\n        </DialogTitle>\n      )}\n      <DialogContent>\n        {!customContentWrapper && (\n          <DialogContentText\n            data-testid={TESTCAFE_ID_CONFIRMATION_DIALOG_CONTENT}\n            classes={{ root: classes.dialogText }}\n            id=\"alert-confirmation-dialog\"\n          >\n            {content}\n          </DialogContentText>\n        )}\n        {customContentWrapper && <div>{content}</div>}\n      </DialogContent>\n      <DialogActions classes={{ root: classes.dialogActions }}>\n        {!omitCancelButton && (\n          <Button\n            variant=\"secondary\"\n            data-testid={TESTCAFE_ID_CONFIRMATION_CANCEL_BUTTON}\n            className={classes.cancelButton}\n            autoFocus\n            onClick={() => setConfirmed(false)}\n          >\n            {cancelText || \"Cancel\"}\n          </Button>\n        )}\n        <Button\n          data-testid={TESTCAFE_ID_CONFIRM_BUTTON}\n          className={\n            isDangerousAction\n              ? classes.dangerButton\n              : classes.submitAgentsButton\n          }\n          type=\"submit\"\n          onClick={() => setConfirmed(true)}\n        >\n          {confirmText || \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { createStyles } from \"@solid/lit-prism-patterns\";\n\nconst WIDTH_DIALOG = 640;\n\nexport default function styles(theme) {\n  return createStyles(theme, [\"icons\", \"button\"], {\n    dialog: {\n      width: WIDTH_DIALOG,\n    },\n    dialogActions: {\n      padding: theme.spacing(2.4),\n    },\n    dialogTitle: {\n      fontSize: theme.typography.h2.fontSize,\n      fontWeight: theme.typography.h2.fontWeight,\n    },\n    dialogText: {\n      fontWeight: theme.typography.body.fontWeight,\n      fontFamily: theme.typography.body.fontFamily,\n    },\n    dangerButton: {\n      backgroundColor: theme.palette.error.main,\n    },\n  });\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* istanbul ignore file */\n\nimport {\n  acp_v3 as legacyAcp,\n  acp_v4 as acp,\n  asUrl,\n  deleteFile,\n  getSolidDataset,\n  getSourceUrl,\n  isContainer,\n  saveSolidDatasetAt,\n  setThing,\n} from \"@inrupt/solid-client\";\nimport {\n  ACL,\n  createAccessMap,\n  displayPermissions,\n  isEmptyAccess,\n} from \"../../solidClientHelpers/permissions\";\nimport { chain, createResponder } from \"../../solidClientHelpers/utils\";\nimport { getOrCreateDatasetOld } from \"../../solidClientHelpers/resource\";\nimport {\n  isCustomPolicy,\n  getPolicyUrl,\n  getPolicyResourceUrl,\n  deletePoliciesContainer,\n} from \"../../models/policy\";\nimport { isHTTPError } from \"../../error\";\nimport {\n  PUBLIC_AGENT_PREDICATE,\n  PUBLIC_AGENT_TYPE,\n} from \"../../models/contact/public\";\nimport {\n  AUTHENTICATED_AGENT_PREDICATE,\n  AUTHENTICATED_AGENT_TYPE,\n} from \"../../models/contact/authenticated\";\nimport { ACP_TYPE_MAP, POLICIES_TYPE_MAP } from \"../../../constants/policies\";\n\nexport const noAcrAccessError =\n  \"No access to Access Control Resource for this resource\";\n\nconst CONTROL_ACCESS_CONSENT = {\n  titleConsent: \"wants to add or remove people from\",\n  iconName: \"user\",\n};\n\nexport function createAcpMap(read = false, write = false, append = false) {\n  return {\n    [ACL.READ.key]: read,\n    [ACL.WRITE.key]: write,\n    [ACL.APPEND.key]: append,\n  };\n}\nconst acpMapForApplyPolicies = {\n  editors: createAcpMap(true, true),\n  viewers: createAcpMap(true),\n  viewAndAdd: createAcpMap(true, false, true),\n  editOnly: createAcpMap(false, true),\n  addOnly: createAcpMap(false, false, true),\n};\n\nexport const getAcpAccessDetails = (access) => {\n  const { read, write, append, control } = access;\n  const key =\n    (read && \"read\") ||\n    (write && \"write\") ||\n    (append && \"append\") ||\n    (control && \"control\");\n  return ACP_TYPE_MAP[key];\n};\n\nexport const getPolicyDetailFromAccess = (access, label) => {\n  const { read, write, append, control } = access;\n  if (read && write && !append) {\n    return POLICIES_TYPE_MAP.editors[label];\n  }\n  if (read && !write && !append) {\n    return POLICIES_TYPE_MAP.viewers[label];\n  }\n  if (read && append && !write) {\n    return POLICIES_TYPE_MAP.viewAndAdd[label];\n  }\n  if (append && !write && !read) {\n    return POLICIES_TYPE_MAP.addOnly[label];\n  }\n  if (write && !append && !read) {\n    return POLICIES_TYPE_MAP.editOnly[label];\n  }\n  if (control) {\n    return CONTROL_ACCESS_CONSENT[label];\n  }\n  return null;\n};\n\n// The following functions multiplex between the latest and legacy ACP API\nfunction switchIfLegacy(legacyFunction, latestFunction, parameters, isLegacy) {\n  return isLegacy\n    ? legacyFunction(...parameters)\n    : latestFunction(...parameters);\n}\n\nconst getMatcher = (policyDataset, matcherUrl, legacy) =>\n  switchIfLegacy(\n    legacyAcp.getRule,\n    acp.getMatcher,\n    [policyDataset, matcherUrl],\n    legacy\n  );\n\nconst getMatcherAll = (policyDataset, legacy) =>\n  switchIfLegacy(\n    legacyAcp.getRuleAll,\n    acp.getMatcherAll,\n    [policyDataset],\n    legacy\n  );\n\nconst createMatcher = (matcherUrl, legacy) =>\n  switchIfLegacy(legacyAcp.createRule, acp.createMatcher, [matcherUrl], legacy);\n\nconst getAllOfMatcherUrlAll = (policy, legacy) =>\n  switchIfLegacy(\n    legacyAcp.getAllOfRuleUrlAll,\n    acp.getAllOfMatcherUrlAll,\n    [policy],\n    legacy\n  );\n\nconst setAllOfMatcherUrl = (policy, matcher, legacy) =>\n  switchIfLegacy(\n    legacyAcp.setAllOfRuleUrl,\n    acp.setAllOfMatcherUrl,\n    [policy, matcher],\n    legacy\n  );\n\nconst addAllOfMatcherUrl = (policy, matcher, legacy) =>\n  switchIfLegacy(\n    legacyAcp.addAllOfRuleUrl,\n    acp.addAllOfMatcherUrl,\n    [policy, matcher],\n    legacy\n  );\n\nconst removeAllOfMatcherUrl = (policy, matcher, legacy) =>\n  switchIfLegacy(\n    legacyAcp.removeAllOfRuleUrl,\n    acp.removeAllOfMatcherUrl,\n    [policy, matcher],\n    legacy\n  );\n\nconst getAllowModes = (policy, legacy) =>\n  switchIfLegacy(legacyAcp.getAllowModes, acp.getAllowModes, [policy], legacy);\n\nconst setAllowModes = (policy, modes, legacy) =>\n  switchIfLegacy(\n    legacyAcp.setAllowModes,\n    acp.setAllowModes,\n    [policy, modes],\n    legacy\n  );\n\nconst getMemberPolicyUrlAll = (datasetWithAcr, legacy) =>\n  switchIfLegacy(\n    legacyAcp.getMemberPolicyUrlAll,\n    acp.getMemberPolicyUrlAll,\n    [datasetWithAcr],\n    legacy\n  );\n\nconst addMemberPolicyUrl = (datasetWithAcr, policyUrl, legacy) =>\n  switchIfLegacy(\n    legacyAcp.addMemberPolicyUrl,\n    acp.addMemberPolicyUrl,\n    [datasetWithAcr, policyUrl],\n    legacy\n  );\n\nexport function addAcpModes(existingAcpModes, newAcpModes) {\n  return existingAcpModes\n    ? createAcpMap(\n        existingAcpModes.read || newAcpModes.read,\n        existingAcpModes.write || newAcpModes.write,\n        existingAcpModes.append || newAcpModes.append\n      )\n    : newAcpModes;\n}\n\nexport function convertAcpToAcl(access) {\n  return createAccessMap(\n    access.apply.read,\n    access.apply.write,\n    access.apply.append,\n    access.access.read && access.access.write\n  );\n}\n\nexport function getOrCreatePermission(\n  permissions,\n  webId,\n  type,\n  inherited = false\n) {\n  const permission = permissions[webId] ?? {\n    webId,\n  };\n  if (type) {\n    permission.type = type;\n  }\n  permission.inherited = inherited;\n  permission.acp = permission.acp ?? {\n    apply: createAcpMap(),\n    access: createAcpMap(),\n  };\n  return permission;\n}\n\nexport function getOrCreatePolicy(policyDataset, url) {\n  const existingPolicy = acp.getPolicy(policyDataset, url);\n  if (existingPolicy) {\n    return { policy: existingPolicy, dataset: policyDataset };\n  }\n  const newPolicy = acp.createPolicy(url);\n  const updatedPolicyDataset = acp.setPolicy(policyDataset, newPolicy);\n  return { policy: newPolicy, dataset: updatedPolicyDataset };\n}\n\nexport function getMatchersOrCreate(\n  matcherUrls,\n  policy,\n  policyDataset,\n  legacy\n) {\n  // assumption: Matchers resides in the same resource as the policies\n  const matchers = matcherUrls\n    .map((url) => getMatcher(policyDataset, url, legacy))\n    .filter((matcher) => !!matcher);\n  if (matchers.length === 0) {\n    const matcherUrl = `${asUrl(policy)}${legacy ? \"Rule\" : \"Matcher\"}`; // e.g. <pod>/policies/.ttl#readPolicyMatcher\n    return { existing: false, matchers: [createMatcher(matcherUrl, legacy)] };\n  }\n  return { existing: true, matchers };\n}\n\nexport function getMatcherWithAgent(matchers, agentWebId) {\n  // assumption 1: the matchers for the policies we work with will not have agents across multiple matchers\n  // assumption 2: there will always be at least one matcher (we enforce this with getMatchersOrCreate)\n  const matcher = matchers.find((r) =>\n    acp.getAgentAll(r).find((webId) => webId === agentWebId)\n  );\n  // if we don't find the agent in a matcher, we'll just pick the first one\n  return matcher || matchers[0];\n}\n\nexport function setAgents(policy, policyDataset, webId, accessToMode, legacy) {\n  const matcherUrls = getAllOfMatcherUrlAll(policy, legacy);\n  const { existing, matchers } = getMatchersOrCreate(\n    matcherUrls,\n    policy,\n    policyDataset,\n    legacy\n  );\n  const matcher = getMatcherWithAgent(matchers, webId);\n  const existingAgents = acp.getAgentAll(matcher);\n  const agentIndex = existingAgents.indexOf(webId);\n  let modifiedMatcher = matcher;\n  if (accessToMode && agentIndex === -1) {\n    modifiedMatcher = acp.addAgent(matcher, webId);\n  }\n  if (!accessToMode && agentIndex !== -1) {\n    modifiedMatcher = acp.removeAgent(matcher, webId);\n  }\n  const modifiedDataset = setThing(policyDataset, modifiedMatcher);\n  const modifiedPolicy = existing\n    ? setAllOfMatcherUrl(policy, modifiedMatcher, legacy)\n    : addAllOfMatcherUrl(policy, modifiedMatcher, legacy);\n  return {\n    policy: modifiedPolicy,\n    dataset: modifiedDataset,\n  };\n}\n\nexport function setPublicAgent(dataset, policy, access, legacy) {\n  const matchersUrls = getAllOfMatcherUrlAll(policy, legacy);\n  const { existing, matchers } = getMatchersOrCreate(\n    matchersUrls,\n    policy,\n    dataset,\n    legacy\n  );\n  const modifiedMatchers = matchers.map((matcher) =>\n    access ? acp.setPublic(matcher) : acp.removePublic(matcher)\n  );\n  const [modifiedDataset] = modifiedMatchers.map((modifiedMatcher) => {\n    return setThing(dataset, modifiedMatcher);\n  });\n  const [modifiedPolicy] = existing\n    ? modifiedMatchers.map((modifiedMatcher) =>\n        setAllOfMatcherUrl(policy, modifiedMatcher, legacy)\n      )\n    : modifiedMatchers.map((modifiedMatcher) =>\n        addAllOfMatcherUrl(policy, modifiedMatcher, legacy)\n      );\n  return {\n    policy: modifiedPolicy,\n    dataset: modifiedDataset,\n  };\n}\n\nexport function setAuthenticatedAgent(dataset, policy, access, legacy) {\n  const matchersUrls = getAllOfMatcherUrlAll(policy, legacy);\n  const { existing, matchers } = getMatchersOrCreate(\n    matchersUrls,\n    policy,\n    dataset,\n    legacy\n  );\n  const modifiedMatchers = matchers.map((matcher) => {\n    const modifiedMatcher = access\n      ? acp.setAuthenticated(matcher)\n      : acp.removeAuthenticated(matcher);\n    return modifiedMatcher;\n  });\n  const [modifiedDataset] = modifiedMatchers.map((modifiedMatcher) => {\n    return setThing(dataset, modifiedMatcher);\n  });\n  const [modifiedPolicy] = existing\n    ? modifiedMatchers.map((modifiedMatcher) =>\n        setAllOfMatcherUrl(policy, modifiedMatcher, legacy)\n      )\n    : modifiedMatchers.map((modifiedMatcher) =>\n        addAllOfMatcherUrl(policy, modifiedMatcher, legacy)\n      );\n  return {\n    policy: modifiedPolicy,\n    dataset: modifiedDataset,\n  };\n}\n\nexport function getNamedPolicyModesAndAgents(policyUrl, policyDataset, legacy) {\n  const policy = acp.getPolicy(policyDataset, policyUrl);\n  if (!policy) return { modes: {}, agents: [] };\n  const modes = getAllowModes(policy, legacy);\n  const matcherUrls = getAllOfMatcherUrlAll(policy, legacy);\n  // assumption: matchers resides in the same resource as policies\n  const matchers = matcherUrls\n    .map((url) => getMatcher(policyDataset, url, legacy))\n    .filter((matcher) => matcher !== null);\n  const agents = matchers.reduce(\n    (memo, matcher) => memo.concat(acp.getAgentAll(matcher)),\n    []\n  );\n  const [authenticatedStatus] = matchers.map((matcher) =>\n    acp.hasAuthenticated(matcher)\n  );\n  if (authenticatedStatus) {\n    agents.unshift(AUTHENTICATED_AGENT_PREDICATE);\n  }\n  const [publicStatus] = matchers.map((matcher) => acp.hasPublic(matcher));\n  if (publicStatus) {\n    agents.unshift(PUBLIC_AGENT_PREDICATE);\n  }\n  return {\n    policyUrl,\n    modes,\n    agents,\n  };\n}\n\nexport function getAgentType(webId) {\n  if (webId === PUBLIC_AGENT_PREDICATE) {\n    return PUBLIC_AGENT_TYPE;\n  }\n  if (webId === AUTHENTICATED_AGENT_PREDICATE) {\n    return AUTHENTICATED_AGENT_TYPE;\n  }\n  return \"agent\";\n}\n\n// this is from old permissions\nexport function getPolicyModesAndAgents(policyUrls, policyDataset, legacy) {\n  return policyUrls\n    .map((url) => acp.getPolicy(policyDataset, url))\n    .filter((policy) => !!policy)\n    .map((policy) => {\n      const modes = getAllowModes(policy, legacy);\n      const matcherUrls = getAllOfMatcherUrlAll(policy, legacy);\n      // assumption: matchers resides in the same resource as policies\n      const matchers = matcherUrls.map((matcher) =>\n        getMatcher(policyDataset, matcher, legacy)\n      );\n      const agents = matchers.reduce(\n        (memo, matcher) => memo.concat(acp.getAgentAll(matcher)),\n        []\n      );\n      return {\n        modes,\n        agents,\n      };\n    });\n}\n\nexport function removePermissionsForAgent(webId, policyDataset, legacy) {\n  return getMatcherAll(policyDataset, legacy).reduce((dataset, matcher) => {\n    const modifiedMatcher = acp.removeAgent(matcher, webId);\n    return setThing(dataset, modifiedMatcher);\n  }, policyDataset);\n}\n\nfunction updateAllowPolicy(\n  policyDataset,\n  policyUrl,\n  webId,\n  accessToMode,\n  acpMap,\n  legacy\n) {\n  return chain(\n    getOrCreatePolicy(policyDataset, policyUrl),\n    ({ policy, dataset }) => ({\n      policy: setAllowModes(policy, acpMap, legacy),\n      dataset,\n    }),\n    ({ policy, dataset }) =>\n      setAgents(policy, dataset, webId, accessToMode, legacy),\n    ({ policy, dataset }) => acp.setPolicy(dataset, policy)\n  );\n}\n\nfunction getAllowAccessPolicy(policyUrl, mode) {\n  return `${policyUrl}#${mode}AccessPolicy`;\n}\n\nfunction getAllowApplyPolicy(policyUrl, mode) {\n  return `${policyUrl}#${mode}ApplyPolicy`;\n}\n\nfunction getPolicyUrlName(policyUrl, name) {\n  return `${policyUrl}#${name}Policy`;\n}\n\nfunction ensureAccessControl(policyUrl, datasetWithAcr, changed) {\n  const policies = acp.getPolicyUrlAll(datasetWithAcr);\n  if (policies.includes(policyUrl)) {\n    return {\n      changed,\n      acr: datasetWithAcr,\n    };\n  }\n  const acr = acp.addAcrPolicyUrl(datasetWithAcr, policyUrl);\n  return {\n    changed: true,\n    acr,\n  };\n}\n\nfunction ensureApplyMembers(policyUrl, datasetWithAcr, changed, legacy) {\n  const policies = getMemberPolicyUrlAll(datasetWithAcr, legacy);\n  const existingPolicies = policies.find((url) => policyUrl === url);\n  if (existingPolicies) {\n    return {\n      changed,\n      acr: datasetWithAcr,\n    };\n  }\n  const acr = addMemberPolicyUrl(datasetWithAcr, policyUrl, legacy);\n  return {\n    changed: changed || !existingPolicies,\n    acr,\n  };\n}\n\nfunction ensureApplyControl(policyUrl, datasetWithAcr, changed, legacy) {\n  const policies = legacy\n    ? legacyAcp.getPolicyUrlAll(datasetWithAcr)\n    : acp.getPolicyUrlAll(datasetWithAcr);\n  const existingPolicies = policies.find((url) => policyUrl === url);\n  if (existingPolicies) {\n    return {\n      changed,\n      acr: datasetWithAcr,\n    };\n  }\n  const acr = legacy\n    ? legacyAcp.addPolicyUrl(datasetWithAcr, policyUrl)\n    : acp.addPolicyUrl(datasetWithAcr, policyUrl);\n  return {\n    changed: changed || !existingPolicies,\n    acr,\n  };\n}\n\nexport function getPodBrowserPolicyUrlAll(\n  resourceWithAcr,\n  policiesContainerUrl,\n  legacy\n) {\n  const policies = legacy\n    ? legacyAcp.getPolicyUrlAll(resourceWithAcr)\n    : acp.getPolicyUrlAll(resourceWithAcr);\n  return policies.filter((policyUrl) =>\n    policyUrl.startsWith(policiesContainerUrl)\n  );\n}\n\nexport async function getPodBrowserPermissions(\n  resourceWithAcr,\n  policiesContainerUrl,\n  fetch,\n  legacy\n) {\n  const policiesUrls = getPodBrowserPolicyUrlAll(\n    resourceWithAcr,\n    policiesContainerUrl,\n    legacy\n  );\n  if (!policiesUrls.length) return [];\n  try {\n    const modesAndAgents = await Promise.all(\n      policiesUrls.map(async (url) => {\n        const dataset = await getSolidDataset(url, {\n          fetch,\n        });\n        return getNamedPolicyModesAndAgents(url, dataset, legacy);\n      })\n    );\n    return modesAndAgents.reduce(\n      (memo, { policyUrl, modes, agents }) =>\n        memo.concat(\n          agents.map((webId) => {\n            // TODO: when we have groups we can pass a \"group\" type here\n            const access = {\n              apply: addAcpModes(createAcpMap(), modes),\n              access: createAcpMap(),\n            };\n            const acl = convertAcpToAcl(access);\n            const alias = getPolicyDetailFromAccess(acl, \"name\");\n            const directPolicyUrl = getPolicyResourceUrl(\n              resourceWithAcr,\n              policiesContainerUrl,\n              alias,\n              legacy\n            );\n            const directPolicyName = legacy\n              ? getPolicyUrlName(directPolicyUrl, alias, legacy)\n              : policyUrl;\n            // : `${policyUrl}${alias}`;\n            return {\n              type: getAgentType(webId),\n              acl,\n              alias,\n              webId,\n              inherited: policyUrl !== directPolicyName,\n            };\n          })\n        ),\n      []\n    );\n  } catch (error) {\n    if (isHTTPError(error.message, 403) || isHTTPError(error.message, 404)) {\n      return [];\n    }\n    throw error;\n  }\n}\n\nexport function getWebIdsFromPermissions(permissions) {\n  return (permissions || []).map(({ webId }) => webId);\n}\n\nexport function getWebIdsFromInheritedPermissions(permissions) {\n  return getWebIdsFromPermissions(\n    (permissions || []).filter(({ inherited }) => inherited)\n  );\n}\n\n/**\n * FIXME This function doesn't really make sense, but it is the current implementation\n * so let's keep it as is for now and figure it out later.\n *\n * @param {*} policyResourceUrl\n */\nasync function updatePolicyIfChanged(policyResourceUrl, fetch) {\n  try {\n    const policyDatasetWithAcr = await acp.getSolidDatasetWithAcr(\n      policyResourceUrl,\n      { fetch }\n    );\n    // FIXME: this assignment doesn't make sense to me.\n    const { acr: policyAcr, changed: policyChanged } = {\n      acr: policyDatasetWithAcr,\n      changed: false,\n    };\n    // This is never true ?\n    if (policyChanged) {\n      await acp.saveAcrFor(policyAcr, { fetch });\n    }\n  } catch (err) {\n    if (!isHTTPError(err.message, 404)) throw err;\n  }\n}\n\nexport default class AcpAccessControlStrategy {\n  #originalWithAcr;\n\n  #policyUrl;\n\n  #policiesContainerUrl;\n\n  #fetch;\n\n  // Legacy ACP behavior uses rules instead of matchers, and stores policies\n  // in resources external to the ACR.\n  #isLegacy;\n\n  constructor(originalWithAcr, policiesContainerUrl, fetch, legacy) {\n    this.#originalWithAcr = originalWithAcr;\n    this.#policyUrl = getPolicyUrl(\n      originalWithAcr,\n      policiesContainerUrl,\n      legacy\n    );\n    this.#policiesContainerUrl = policiesContainerUrl;\n    this.#fetch = fetch;\n    this.#isLegacy = legacy;\n  }\n\n  async getAllPermissionsForResource() {\n    const allPermissions = await getPodBrowserPermissions(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      this.#fetch,\n      this.#isLegacy\n    );\n    return allPermissions;\n  }\n\n  async getPermissionsForPolicy(policyName) {\n    const allPermissions = await getPodBrowserPermissions(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      this.#fetch,\n      this.#isLegacy\n    );\n    return allPermissions.filter(({ alias }) => alias === policyName);\n  }\n\n  async getPermissions() {\n    const permissions = {};\n    try {\n      const policyDataset = await getSolidDataset(this.#policyUrl, {\n        fetch: this.#fetch,\n      });\n      // assigning Read, Write, and Append\n      // assumption 1: We know the URLs of the policies we want to check\n      getPolicyModesAndAgents(\n        [\n          getAllowApplyPolicy(this.#policyUrl, \"read\"),\n          getAllowApplyPolicy(this.#policyUrl, \"write\"),\n          getAllowApplyPolicy(this.#policyUrl, \"append\"),\n        ],\n        policyDataset,\n        this.#isLegacy\n      ).forEach(({ modes, agents }) =>\n        agents.forEach((webId) => {\n          const permission = getOrCreatePermission(permissions, webId);\n          permission.acp.apply = addAcpModes(permission.acp.apply, modes);\n          permissions[webId] = permission;\n        })\n      );\n      // assigning Control\n      // assumption 2: control access involves another policy URL, but since both have the same modes, we only check one\n      getPolicyModesAndAgents(\n        [getAllowAccessPolicy(this.#policyUrl, \"control\")],\n        policyDataset,\n        this.#isLegacy\n      ).forEach(({ modes, agents }) =>\n        agents.forEach((webId) => {\n          const permission = getOrCreatePermission(permissions, webId);\n          permission.acp.access = addAcpModes(permission.acp.access, modes);\n          permissions[webId] = permission;\n        })\n      );\n      // normalize permissions\n      return Object.values(permissions).map(({ acp: access, webId }) => {\n        const acl = convertAcpToAcl(access);\n        return {\n          acl,\n          alias: displayPermissions(acl),\n          webId,\n        };\n      });\n    } catch (error) {\n      if (isHTTPError(error.message, 403) || isHTTPError(error.message, 404)) {\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  saveApplyPolicyForOriginalResource(dataset, webId, access, mode, acpMap) {\n    const allowUrl = getAllowApplyPolicy(this.#policyUrl, mode);\n    return chain(dataset, (d) =>\n      updateAllowPolicy(\n        d,\n        allowUrl,\n        webId,\n        access[mode],\n        acpMap,\n        this.#isLegacy\n      )\n    );\n  }\n\n  saveAccessPolicyForOriginalResource(dataset, webId, access) {\n    const allowUrl = getAllowAccessPolicy(this.#policyUrl, \"control\");\n    const modes = createAcpMap(true, true);\n    return chain(dataset, (d) =>\n      updateAllowPolicy(\n        d,\n        allowUrl,\n        webId,\n        access.control,\n        modes,\n        this.#isLegacy\n      )\n    );\n  }\n\n  saveApplyPolicyForPolicyResource(dataset, webId, access) {\n    const allowUrl = getAllowApplyPolicy(this.#policyUrl, \"control\");\n    const modes = createAcpMap(true, true);\n    return chain(dataset, (d) =>\n      updateAllowPolicy(\n        d,\n        allowUrl,\n        webId,\n        access.control,\n        modes,\n        this.#isLegacy\n      )\n    );\n  }\n\n  updatePermissionsForAgent(webId, access, policyDataset) {\n    return chain(\n      policyDataset,\n      (dataset) =>\n        this.saveApplyPolicyForOriginalResource(\n          dataset,\n          webId,\n          access,\n          \"read\",\n          createAcpMap(true)\n        ),\n      (dataset) =>\n        this.saveApplyPolicyForOriginalResource(\n          dataset,\n          webId,\n          access,\n          \"write\",\n          createAcpMap(false, true)\n        ),\n      (dataset) =>\n        this.saveApplyPolicyForOriginalResource(\n          dataset,\n          webId,\n          access,\n          \"append\",\n          createAcpMap(false, false, true)\n        ),\n      (dataset) =>\n        this.saveAccessPolicyForOriginalResource(dataset, webId, access),\n      (dataset) => this.saveApplyPolicyForPolicyResource(dataset, webId, access)\n    );\n  }\n\n  async linkPoliciesToAcr(originalChanged, originalAcr) {\n    if (originalChanged) {\n      this.#originalWithAcr = await acp.saveAcrFor(originalAcr, {\n        fetch: this.#fetch,\n      });\n    }\n  }\n\n  async ensureAccessControlAllNamedPolicies() {\n    // ensuring access controls for original resource\n    const editorsPolicyResourceUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      \"editors\",\n      this.#isLegacy\n    );\n    const editorsPolicy = this.#isLegacy\n      ? getPolicyUrlName(editorsPolicyResourceUrl, \"editors\")\n      : `${this.#policyUrl}editors`;\n    const viewersPolicyResourceUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      \"viewers\",\n      this.#isLegacy\n    );\n    const viewersPolicy = this.#isLegacy\n      ? getPolicyUrlName(viewersPolicyResourceUrl, \"viewers\")\n      : `${this.#policyUrl}viewers`;\n    const { acr: originalAcr, changed: originalChanged } = chain(\n      {\n        acr: this.#originalWithAcr,\n        changed: false,\n      },\n      ({ acr, changed }) =>\n        ensureApplyControl(editorsPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyControl(viewersPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyMembers(editorsPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyMembers(viewersPolicy, acr, changed, this.#isLegacy)\n    );\n    // In order to apply the policies to the target resource, both the policies'\n    // content and their links to the Access Control must be saved.\n    if (this.#isLegacy) {\n      // In legacy systems, the policies' content must be saved first, because they\n      // are stored in external resources.\n      // ensuring policy content is up-to-date\n      await updatePolicyIfChanged(editorsPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(viewersPolicyResourceUrl, this.#fetch);\n      // ensuring access controls for policy resource\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n    } else {\n      // In latest systems, the policies are inline of the ACR. It means they could\n      // be disregarded if they are not linked to the Access Control first.\n      // ensuring access controls for policy resource\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n      // ensuring policy content is up-to-date\n      await updatePolicyIfChanged(editorsPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(viewersPolicyResourceUrl, this.#fetch);\n    }\n  }\n\n  async ensureAccessControlAllCustomPolicies() {\n    // ensuring access controls for original resource\n    const viewAndAddPolicyResourceUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      \"viewAndAdd\",\n      this.#isLegacy\n    );\n    const viewAndAddPolicy = this.#isLegacy\n      ? getPolicyUrlName(viewAndAddPolicyResourceUrl, \"viewAndAdd\")\n      : `${this.#policyUrl}viewAndAdd`;\n    const editOnlyPolicyResourceUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      \"editOnly\",\n      this.#isLegacy\n    );\n    const editOnlyPolicy = this.#isLegacy\n      ? getPolicyUrlName(editOnlyPolicyResourceUrl, \"editOnly\")\n      : `${this.#policyUrl}editOnly`;\n    const addOnlyPolicyResourceUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      \"addOnly\",\n      this.#isLegacy\n    );\n    const addOnlyPolicy = this.#isLegacy\n      ? getPolicyUrlName(addOnlyPolicyResourceUrl, \"addOnly\")\n      : `${this.#policyUrl}addOnly`;\n\n    const { acr: originalAcr, changed: originalChanged } = chain(\n      {\n        acr: this.#originalWithAcr,\n        changed: false,\n      },\n      ({ acr, changed }) =>\n        ensureApplyControl(viewAndAddPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyControl(editOnlyPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyControl(addOnlyPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyMembers(viewAndAddPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyMembers(editOnlyPolicy, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyMembers(addOnlyPolicy, acr, changed, this.#isLegacy)\n    );\n\n    // In order to apply the policies to the target resource, both the policies'\n    // content and their links to the Access Control must be saved.\n    if (this.#isLegacy) {\n      // In legacy systems, the policies' content must be saved first, because they\n      // are stored in external resources.\n      // ensuring policy content is up-to-date\n      await updatePolicyIfChanged(viewAndAddPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(editOnlyPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(addOnlyPolicyResourceUrl, this.#fetch);\n      // ensuring access controls for policy resource\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n    } else {\n      // In latest systems, the policies are inline of the ACR. It means they could\n      // be disregarded if they are not linked to the Access Control first.\n      // ensuring access controls for policy resource\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n      // ensuring policy content is up-to-date\n      await updatePolicyIfChanged(viewAndAddPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(editOnlyPolicyResourceUrl, this.#fetch);\n      await updatePolicyIfChanged(addOnlyPolicyResourceUrl, this.#fetch);\n    }\n  }\n\n  async ensureAccessControlPolicyAll(policyName) {\n    return isCustomPolicy(policyName)\n      ? this.ensureAccessControlAllCustomPolicies()\n      : this.ensureAccessControlAllNamedPolicies();\n  }\n\n  async ensureAccessControlAll() {\n    // ensuring access controls for original resource\n    const readAllowApply = getAllowApplyPolicy(this.#policyUrl, \"read\");\n    const writeAllowApply = getAllowApplyPolicy(this.#policyUrl, \"write\");\n    const appendAllowApply = getAllowApplyPolicy(this.#policyUrl, \"append\");\n    const controlAllowAcc = getAllowAccessPolicy(this.#policyUrl, \"control\");\n    const { acr: originalAcr, changed: originalChanged } = chain(\n      {\n        acr: this.#originalWithAcr,\n        changed: false,\n      },\n      ({ acr, changed }) =>\n        ensureApplyControl(readAllowApply, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyControl(writeAllowApply, acr, changed, this.#isLegacy),\n      ({ acr, changed }) =>\n        ensureApplyControl(appendAllowApply, acr, changed, this.#isLegacy),\n      ({ acr, changed }) => ensureAccessControl(controlAllowAcc, acr, changed)\n    );\n    if (!this.#isLegacy) {\n      // For non-legacy systems, the policy must be linked to the ACR before its\n      // contet is written.\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n    }\n\n    // ensuring access controls for policy resource\n    const policyDatasetWithAcr = await acp.getSolidDatasetWithAcr(\n      this.#policyUrl,\n      { fetch: this.#fetch }\n    );\n    const controlAllowApply = getAllowApplyPolicy(this.#policyUrl, \"control\");\n\n    const { acr: policyAcr, changed: policyChanged } = chain(\n      {\n        acr: policyDatasetWithAcr,\n        changed: false,\n      },\n      ({ acr, changed }) =>\n        ensureApplyControl(controlAllowApply, acr, changed, this.#isLegacy)\n    );\n    if (policyChanged) {\n      try {\n        await acp.saveAcrFor(policyAcr, { fetch: this.#fetch });\n      } catch (error) {\n        // TODO: Handle this error (probably by replacing acpv1.saveAcrFor with newer ACP APIs)\n        // Again, there is something in acpv1.saveAcrFor that fails to handle the policyAcr properly.\n        // It doesn't seem to affect the outcome though, so we'll leave it like this for now\n      }\n    }\n\n    if (this.#isLegacy) {\n      // For legacy systems, the policy must be linked to the ACR after its\n      // contet has been written in external resources.\n      await this.linkPoliciesToAcr(originalChanged, originalAcr);\n    }\n  }\n\n  // For backwards compatibility, so that it remains compatible with the legacy\n  // implementation which will still be around.\n  setRulePublic = this.setMatcherPublic;\n\n  async setMatcherPublic(policyName, access) {\n    const namedPolicyContainerUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      policyName,\n      this.#isLegacy\n    );\n\n    const { respond, error } = createResponder();\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(namedPolicyContainerUrl, this.#fetch);\n\n    if (getOrCreateError) return error(getOrCreateError);\n    const policyUrl = this.#isLegacy\n      ? getPolicyUrlName(namedPolicyContainerUrl, policyName)\n      : `${this.#policyUrl}${policyName}`;\n    const acpMap = acpMapForApplyPolicies[policyName];\n    const updatedDataset = chain(\n      getOrCreatePolicy(policyDataset, policyUrl),\n      ({ policy, dataset }) => ({\n        policy: setAllowModes(policy, acpMap, this.#isLegacy),\n        dataset,\n      }),\n      ({ policy, dataset }) =>\n        setPublicAgent(dataset, policy, access, this.#isLegacy),\n      ({ policy, dataset }) => acp.setPolicy(dataset, policy)\n    );\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      // then saving changes to the ACRs\n      await this.ensureAccessControlPolicyAll(policyName);\n    } else {\n      // saving changes to the ACRs first\n      await this.ensureAccessControlPolicyAll(policyName);\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  // For backwards compatibility, so that it remains compatible with the legacy\n  // implementation which will still be around.\n  setRuleAuthenticated = this.setMatcherAuthenticated;\n\n  async setMatcherAuthenticated(policyName, access) {\n    const namedPolicyContainerUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      policyName,\n      this.#isLegacy\n    );\n\n    const { respond, error } = createResponder();\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(namedPolicyContainerUrl, this.#fetch);\n\n    if (getOrCreateError) return error(getOrCreateError);\n    const policyUrl = this.#isLegacy\n      ? getPolicyUrlName(namedPolicyContainerUrl, policyName)\n      : `${this.#policyUrl}${policyName}`;\n    const acpMap = acpMapForApplyPolicies[policyName];\n    const updatedDataset = chain(\n      getOrCreatePolicy(policyDataset, policyUrl),\n      ({ policy, dataset }) => ({\n        policy: setAllowModes(policy, acpMap, this.#isLegacy),\n        dataset,\n      }),\n      ({ policy, dataset }) =>\n        setAuthenticatedAgent(dataset, policy, access, this.#isLegacy),\n      ({ policy, dataset }) => acp.setPolicy(dataset, policy)\n    );\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      // then saving changes to the ACRs\n      await this.ensureAccessControlPolicyAll(policyName);\n    } else {\n      // saving changes to the ACRs first\n      await this.ensureAccessControlPolicyAll(policyName);\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  async addAgentToPolicy(webId, policyName) {\n    const namedPolicyContainerUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      policyName,\n      this.#isLegacy\n    );\n\n    const { respond, error } = createResponder();\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(namedPolicyContainerUrl, this.#fetch);\n    if (getOrCreateError) return error(getOrCreateError);\n    const policyUrl = this.#isLegacy\n      ? getPolicyUrlName(namedPolicyContainerUrl, policyName)\n      : `${this.#policyUrl}${policyName}`;\n    const acpMap = acpMapForApplyPolicies[policyName];\n    const updatedDataset = chain(\n      getOrCreatePolicy(policyDataset, policyUrl),\n      ({ policy, dataset }) => ({\n        policy: setAllowModes(policy, acpMap, this.#isLegacy),\n        dataset,\n      }),\n      ({ policy, dataset }) =>\n        setAgents(policy, dataset, webId, true, this.#isLegacy),\n      ({ policy, dataset }) => acp.setPolicy(dataset, policy)\n    );\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      // then saving changes to the ACRs\n      await this.ensureAccessControlPolicyAll(policyName);\n    } else {\n      // saving changes to the ACRs first\n      await this.ensureAccessControlPolicyAll(policyName);\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  async removeAgentFromPolicy(webId, policyName) {\n    const namedPolicyContainerUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      policyName,\n      this.#isLegacy\n    );\n    const { respond, error } = createResponder();\n\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(namedPolicyContainerUrl, this.#fetch);\n    if (getOrCreateError) return error(getOrCreateError);\n\n    const policyUrl = this.#isLegacy\n      ? getPolicyUrlName(namedPolicyContainerUrl, policyName)\n      : `${this.#policyUrl}${policyName}`;\n    const policy = acp.getPolicy(policyDataset, policyUrl);\n    if (!policy) {\n      // not able to remove the agent from this policy (most likely because it is inherited)\n      // we simply terminate and return the original ACR\n      return respond(this.#originalWithAcr);\n    }\n    const matchersUrls = getAllOfMatcherUrlAll(policy, this.#isLegacy);\n    const [updatedDataset] = matchersUrls.map((matcherUrl) => {\n      const matcher = getMatcher(policyDataset, matcherUrl, this.#isLegacy);\n      const modifiedMatcher = acp.removeAgent(matcher, webId);\n      return setThing(policyDataset, modifiedMatcher);\n    });\n    const { agents } = getNamedPolicyModesAndAgents(\n      policyUrl,\n      updatedDataset,\n      this.#isLegacy\n    );\n    const isLastAgent = !agents.length;\n    if (isLastAgent) {\n      // remove the matcher\n      const [modifiedPolicy] = matchersUrls.map((matcherUrl) => {\n        return removeAllOfMatcherUrl(policy, matcherUrl, this.#isLegacy);\n      });\n      const modifiedPolicyMatchersUrls = getAllOfMatcherUrlAll(\n        modifiedPolicy,\n        this.#isLegacy\n      );\n      // if there are no matchers left in the policy\n      // In the case of the latest ACP systems, the policies are stored inline of\n      // the ACR, so there is nothing to delete.\n      if (!modifiedPolicyMatchersUrls.length && this.#isLegacy) {\n        await deleteFile(policyUrl, { fetch: this.#fetch });\n        // if policies container is a container and it's empty, remove it too\n        if (namedPolicyContainerUrl && isContainer(namedPolicyContainerUrl)) {\n          deletePoliciesContainer(namedPolicyContainerUrl, fetch);\n        }\n      }\n    }\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      // then saving changes to the ACRs\n      await this.ensureAccessControlPolicyAll(policyName);\n    } else {\n      // saving changes to the ACRs first\n      await this.ensureAccessControlPolicyAll(policyName);\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(namedPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  async removeAgentFromCustomPolicy(webId, policyName) {\n    const customPolicyContainerUrl = getPolicyResourceUrl(\n      this.#originalWithAcr,\n      this.#policiesContainerUrl,\n      policyName,\n      this.#isLegacy\n    );\n    const { respond, error } = createResponder();\n\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(customPolicyContainerUrl, this.#fetch);\n\n    if (getOrCreateError) return error(getOrCreateError);\n\n    const policyUrl = this.#isLegacy\n      ? getPolicyUrlName(customPolicyContainerUrl, policyName)\n      : `${this.#policyUrl}${policyName}`;\n    const policy = acp.getPolicy(policyDataset, policyUrl);\n    const matchersUrls = acp.getAllOfMatcherUrlAll(policy);\n    const [updatedDataset] = matchersUrls.map((matcherUrl) => {\n      const matcher = acp.getMatcher(policyDataset, matcherUrl);\n      const modifiedMatcher = acp.removeAgent(matcher, webId);\n      return setThing(policyDataset, modifiedMatcher);\n    });\n\n    const { agents } = getNamedPolicyModesAndAgents(\n      policyUrl,\n      updatedDataset,\n      this.#isLegacy\n    );\n    const isLastAgent = !agents.length;\n    if (isLastAgent) {\n      // remove the matcher\n      const [modifiedPolicy] = matchersUrls.map((matcherUrl) => {\n        return acp.removeAllOfMatcherUrl(policy, matcherUrl);\n      });\n      const modifiedPolicyMatchersUrls =\n        acp.getAllOfMatcherUrlAll(modifiedPolicy);\n      // if there are no matchers left in the policy\n      if (!modifiedPolicyMatchersUrls.length) {\n        await deleteFile(policyUrl, { fetch: this.#fetch });\n        // if policies container is a container and it's empty, remove it too\n        if (customPolicyContainerUrl && isContainer(customPolicyContainerUrl)) {\n          deletePoliciesContainer(customPolicyContainerUrl, fetch);\n        }\n      }\n    }\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(customPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      // then saving changes to the ACRs\n      await this.ensureAccessControlPolicyAll(policyName);\n    } else {\n      // saving changes to the ACRs first\n      await this.ensureAccessControlPolicyAll(policyName);\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(customPolicyContainerUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  async savePermissionsForAgent(webId, access) {\n    const { respond, error } = createResponder();\n\n    const { response: policyDataset, error: getOrCreateError } =\n      await getOrCreateDatasetOld(this.#policyUrl, this.#fetch);\n\n    if (getOrCreateError) return error(getOrCreateError);\n    const updatedDataset = isEmptyAccess(access)\n      ? removePermissionsForAgent(webId, policyDataset, this.#isLegacy)\n      : this.updatePermissionsForAgent(webId, access, policyDataset);\n\n    if (this.#isLegacy) {\n      // Saving changes to the policy resource first\n      await saveSolidDatasetAt(this.#policyUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n      /// saving changes to the ACRs\n      await this.ensureAccessControlAll();\n    } else {\n      // saving changes to the ACRs\n      await this.ensureAccessControlAll();\n      // then saving changes to the inline policy\n      await saveSolidDatasetAt(this.#policyUrl, updatedDataset, {\n        fetch: this.#fetch,\n      });\n    }\n\n    return respond(this.#originalWithAcr);\n  }\n\n  static async init(resourceInfo, policiesContainerUrl, fetch, legacy) {\n    const resourceUrl = getSourceUrl(resourceInfo);\n    const datasetWithAcr = await acp.getResourceInfoWithAcr(resourceUrl, {\n      fetch,\n    });\n    if (!acp.hasAccessibleAcr(datasetWithAcr)) {\n      throw new Error(noAcrAccessError);\n    }\n    return new AcpAccessControlStrategy(\n      datasetWithAcr,\n      policiesContainerUrl,\n      fetch,\n      legacy\n    );\n  }\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useEffect } from \"react\";\nimport Router, { useRouter } from \"next/router\";\nimport { useSession } from \"@inrupt/solid-ui-react\";\n\nexport const SESSION_STATES = {\n  LOGGED_IN: \"LOGGED_IN\",\n  LOGGED_OUT: \"LOGGED_OUT\",\n};\n\nexport async function redirectBasedOnSessionState(\n  sessionIsLoggedIn,\n  sessionRequestInProgress,\n  redirectIfSessionState,\n  location\n) {\n  if (sessionRequestInProgress) {\n    return;\n  }\n\n  if (\n    sessionIsLoggedIn &&\n    redirectIfSessionState === SESSION_STATES.LOGGED_IN\n  ) {\n    await Router.push(location);\n  }\n\n  if (\n    !sessionIsLoggedIn &&\n    redirectIfSessionState === SESSION_STATES.LOGGED_OUT\n  ) {\n    await Router.push(location);\n  }\n}\n\nexport function useRedirectIfLoggedOut(location = \"/login\") {\n  const { session, sessionRequestInProgress } = useSession();\n\n  useEffect(() => {\n    if (session.info.isLoggedIn) return;\n    redirectBasedOnSessionState(\n      session.info.isLoggedIn,\n      sessionRequestInProgress,\n      SESSION_STATES.LOGGED_OUT,\n      location\n    );\n  });\n}\n\nexport function useRedirectIfLoggedIn(location = \"/\") {\n  const { session, sessionRequestInProgress } = useSession();\n  const router = useRouter();\n  useEffect(() => {\n    if (\n      (session.info.isLoggedIn && !router.asPath.includes(\"login\")) ||\n      sessionRequestInProgress\n    )\n      return;\n    redirectBasedOnSessionState(\n      session.info.isLoggedIn,\n      sessionRequestInProgress,\n      SESSION_STATES.LOGGED_IN,\n      location\n    );\n  }, [session, router, location, sessionRequestInProgress]);\n}\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  addStringNoLocale,\n  addUrl,\n  createThing,\n  getStringNoLocale,\n  getUrl,\n  setThing,\n} from \"@inrupt/solid-client\";\nimport { foaf } from \"rdf-namespaces\";\nimport { chain } from \"../../../solidClientHelpers/utils\";\n\nconst AGENT_PREDICATE = \"http://www.w3.org/ns/solid/acp#agent\";\nexport const AUTHENTICATED_AGENT_PREDICATE =\n  \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\";\n\nexport const AUTHENTICATED_AGENT_NAME = \"Anyone signed in\";\nexport const AUTHENTICATED_AGENT_TYPE = \"authenticated\";\n\nexport const AUTHENTICATED_AGENT = {\n  isOfType: (thing) =>\n    thing && getUrl(thing, AGENT_PREDICATE) === AUTHENTICATED_AGENT_PREDICATE,\n  getName: (thing) => getStringNoLocale(thing, foaf.name),\n  getAvatarProps: () => ({\n    icon: \"user-lock\",\n    src: null,\n    variant: \"authenticated\",\n  }),\n};\n\nexport const createAuthenticatedAgent = (dataset) => {\n  const thing = chain(\n    createThing(),\n    (t) =>\n      addUrl(\n        t,\n        \"http://www.w3.org/ns/solid/acp#agent\",\n        \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\"\n      ),\n    (t) => addStringNoLocale(t, foaf.name, \"Anyone signed in\")\n  );\n  const updatedDataset = setThing(dataset, thing);\n  return {\n    thing,\n    dataset: updatedDataset,\n    type: AUTHENTICATED_AGENT,\n  };\n};\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  addStringNoLocale,\n  addUrl,\n  createThing,\n  getStringNoLocale,\n  getUrl,\n  setThing,\n} from \"@inrupt/solid-client\";\nimport { foaf } from \"rdf-namespaces\";\nimport { chain } from \"../../../solidClientHelpers/utils\";\n\nconst AGENT_PREDICATE = \"http://www.w3.org/ns/solid/acp#agent\";\nexport const PUBLIC_AGENT_NAME = \"Anyone\";\nexport const PUBLIC_AGENT_TYPE = \"public\";\n\nexport const PUBLIC_AGENT_PREDICATE =\n  \"http://www.w3.org/ns/solid/acp#PublicAgent\";\n\nexport const PUBLIC_AGENT = {\n  isOfType: (thing) =>\n    thing && getUrl(thing, AGENT_PREDICATE) === PUBLIC_AGENT_PREDICATE,\n  getName: (thing) => getStringNoLocale(thing, foaf.name),\n  getAvatarProps: () => ({\n    icon: \"globe\",\n    src: null,\n    variant: \"public\",\n  }),\n};\n\nexport const createPublicAgent = (dataset) => {\n  const thing = chain(\n    createThing(),\n    (t) =>\n      addUrl(\n        t,\n        \"http://www.w3.org/ns/solid/acp#agent\",\n        \"http://www.w3.org/ns/solid/acp#PublicAgent\"\n      ),\n    (t) => addStringNoLocale(t, foaf.name, \"Anyone\")\n  );\n  const updatedDataset = setThing(dataset, thing);\n  return {\n    thing,\n    dataset: updatedDataset,\n    type: PUBLIC_AGENT,\n  };\n};\n","/**\n * Copyright 2020 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nexport const ACL = {\n  NONE: {\n    key: \"none\",\n    alias: \"No access\",\n    acl: {\n      read: false,\n      write: false,\n      append: false,\n      control: false,\n    },\n  },\n  READ: {\n    key: \"read\",\n    alias: \"View\",\n    acl: {\n      read: true,\n      write: false,\n      append: false,\n      control: false,\n    },\n  },\n  WRITE: {\n    key: \"write\",\n    alias: \"Edit\",\n    acl: {\n      read: true,\n      write: true,\n      append: true,\n      control: false,\n    },\n  },\n  APPEND: {\n    key: \"append\",\n    alias: \"Append\",\n    acl: {\n      read: true,\n      write: false,\n      append: true,\n      control: false,\n    },\n  },\n  CONTROL: {\n    key: \"control\",\n    alias: \"Control\",\n    acl: {\n      read: true,\n      write: true,\n      append: true,\n      control: true,\n    },\n  },\n};\n\nexport const PERMISSIONS = [\"read\", \"write\", \"append\", \"control\"];\n\nexport function aclToString(access) {\n  return `read:${access.read},write:${access.write},append:${access.append},control:${access.control}`;\n}\n\nexport function isEqualACL(aclA, aclB) {\n  return aclToString(aclA) === aclToString(aclB);\n}\n\nexport function displayPermissions(permissions) {\n  const templatePermission = Object.values(ACL).find((template) => {\n    const { acl } = template;\n    return isEqualACL(permissions, acl);\n  });\n\n  if (templatePermission) return templatePermission.alias;\n\n  return \"Custom\";\n}\n\nexport function createAccessMap(\n  read = false,\n  write = false,\n  append = false,\n  control = false\n) {\n  return {\n    [ACL.READ.key]: read,\n    [ACL.WRITE.key]: write,\n    [ACL.APPEND.key]: append,\n    [ACL.CONTROL.key]: control,\n  };\n}\n\nexport function isEmptyAccess(accessMap) {\n  return Object.values(accessMap).reduce(\n    (memo, access) => memo && !access,\n    true\n  );\n}\n"],"names":["useStyles","makeStyles","theme","createStyles","dialog","width","dialogActions","padding","spacing","dialogTitle","fontSize","typography","h2","fontWeight","dialogText","body","fontFamily","dangerButton","backgroundColor","palette","error","main","styles","ConfirmationDialog","classes","useContext","ConfirmationDialogContext","open","title","content","customContentWrapper","setConfirmed","cancelText","confirmText","omitCancelButton","isDangerousAction","Dialog","paperWidthFalse","maxWidth","DialogTitle","disableTypography","root","DialogContent","DialogContentText","id","DialogActions","variant","className","cancelButton","autoFocus","onClick","submitAgentsButton","type","CONTROL_ACCESS_CONSENT","titleConsent","iconName","createAcpMap","read","write","append","ACL","acpMapForApplyPolicies","editors","viewers","viewAndAdd","editOnly","addOnly","getAcpAccessDetails","access","control","key","ACP_TYPE_MAP","getPolicyDetailFromAccess","label","POLICIES_TYPE_MAP","switchIfLegacy","legacyFunction","latestFunction","parameters","isLegacy","getMatcher","policyDataset","matcherUrl","legacy","legacyAcp","acp","createMatcher","getAllOfMatcherUrlAll","policy","setAllOfMatcherUrl","matcher","addAllOfMatcherUrl","removeAllOfMatcherUrl","getAllowModes","setAllowModes","modes","addAcpModes","existingAcpModes","newAcpModes","convertAcpToAcl","createAccessMap","apply","getOrCreatePermission","permissions","webId","inherited","permission","getOrCreatePolicy","url","existingPolicy","dataset","newPolicy","getMatchersOrCreate","matcherUrls","matchers","map","filter","length","asUrl","existing","setAgents","accessToMode","agentWebId","find","r","getMatcherWithAgent","agentIndex","indexOf","modifiedMatcher","modifiedDataset","setThing","setPublicAgent","modifiedMatchers","setAuthenticatedAgent","getNamedPolicyModesAndAgents","policyUrl","agents","reduce","memo","concat","unshift","AUTHENTICATED_AGENT_PREDICATE","PUBLIC_AGENT_PREDICATE","getAgentType","PUBLIC_AGENT_TYPE","AUTHENTICATED_AGENT_TYPE","getPolicyModesAndAgents","policyUrls","removePermissionsForAgent","getMatcherAll","updateAllowPolicy","acpMap","chain","getAllowAccessPolicy","mode","getAllowApplyPolicy","getPolicyUrlName","name","ensureAccessControl","datasetWithAcr","changed","includes","acr","ensureApplyMembers","policies","getMemberPolicyUrlAll","existingPolicies","addMemberPolicyUrl","ensureApplyControl","getPodBrowserPolicyUrlAll","resourceWithAcr","policiesContainerUrl","startsWith","getPodBrowserPermissions","fetch","policiesUrls","Promise","all","getSolidDataset","modesAndAgents","acl","alias","directPolicyUrl","getPolicyResourceUrl","directPolicyName","isHTTPError","message","getWebIdsFromPermissions","getWebIdsFromInheritedPermissions","updatePolicyIfChanged","policyResourceUrl","policyDatasetWithAcr","policyAcr","AcpAccessControlStrategy","originalWithAcr","this","setMatcherPublic","setMatcherAuthenticated","getPolicyUrl","allPermissions","policyName","forEach","Object","values","displayPermissions","allowUrl","d","saveApplyPolicyForOriginalResource","saveAccessPolicyForOriginalResource","saveApplyPolicyForPolicyResource","originalChanged","originalAcr","editorsPolicyResourceUrl","editorsPolicy","viewersPolicyResourceUrl","viewersPolicy","linkPoliciesToAcr","viewAndAddPolicyResourceUrl","viewAndAddPolicy","editOnlyPolicyResourceUrl","editOnlyPolicy","addOnlyPolicyResourceUrl","addOnlyPolicy","isCustomPolicy","ensureAccessControlAllCustomPolicies","ensureAccessControlAllNamedPolicies","readAllowApply","writeAllowApply","appendAllowApply","controlAllowAcc","controlAllowApply","namedPolicyContainerUrl","createResponder","respond","getOrCreateDatasetOld","response","getOrCreateError","updatedDataset","saveSolidDatasetAt","ensureAccessControlPolicyAll","matchersUrls","modifiedPolicy","deleteFile","isContainer","deletePoliciesContainer","customPolicyContainerUrl","isEmptyAccess","updatePermissionsForAgent","ensureAccessControlAll","resourceInfo","resourceUrl","getSourceUrl","Error","SESSION_STATES","redirectBasedOnSessionState","sessionIsLoggedIn","sessionRequestInProgress","redirectIfSessionState","location","Router","useRedirectIfLoggedOut","useSession","session","useEffect","info","isLoggedIn","useRedirectIfLoggedIn","router","useRouter","asPath","AUTHENTICATED_AGENT_NAME","AUTHENTICATED_AGENT","isOfType","thing","getUrl","getName","getStringNoLocale","foaf","getAvatarProps","icon","src","createAuthenticatedAgent","createThing","t","addUrl","addStringNoLocale","PUBLIC_AGENT_NAME","PUBLIC_AGENT","createPublicAgent","NONE","READ","WRITE","APPEND","CONTROL","aclToString","templatePermission","template","aclB","accessMap"],"sourceRoot":""}